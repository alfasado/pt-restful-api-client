!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.PTRESTfulAPIClient=e():t.PTRESTfulAPIClient=e()}(this,(function(){return(()=>{"use strict";var t={};return(()=>{var e=t;e.default=class{constructor(t,e){if(!t)throw"Paramater `apiPath` is required.";if(isNaN(e)||0===e)throw"Paramater `apiVersion` is required.";this.basePath=`${t}/v${e}`}async postData(t,e={},a=null,r="post"){const i={"Content-Type":"application/json"};a&&(i["X-PCMSX-Authorization"]=a);return await fetch(t,{method:r,mode:"cors",cache:"no-cache",credentials:"include",headers:i,body:JSON.stringify(e)})}async getData(t,e={},a=null){let r={};a&&(r={headers:{"X-PCMSX-Authorization":a}});let i="";if(Object.keys(e).length){const t=new URLSearchParams(e).toString();t&&(i="?"+t)}return await fetch(`${t}${i}`,r)}async runFetch(t,e,a=0,r={},i={},n=null){let s,o;return s=-1===a?t:null===a?`${this.basePath}${t}`:`${this.basePath}/${a}${t}`,o="get"===e?await this.getData(s,r,n):await this.postData(s,i,n,e),o}async authentication(t,e,a=!1){if(!t)throw"Paramater `name` is required.";if(!e)throw"Paramater `password` is required.";const r={name:t,password:e,remember:a?1:0};return await this.runFetch("/authentication","post",null,{},r)}async listObjects(t,e=0,a={},r=null){if(!t)throw"Paramater `model` is required.";return await this.runFetch(`/${t}/list`,"get",e,a,{},r)}async doCRUDObject(t,e,a,r=0,i=null,n={},s={},o=null){if(!e)throw"Paramater `model` is required.";let c;if("insert"===t||"get"===t&&!a)c=`/${e}/${t}`;else{if(!a)throw"Paramater `id` is required.";"string"==typeof a&&(a=encodeURI(a)),c=`/${e}/${t}/${a}`}o||(o="get"===t?"get":"post");return await this.runFetch(c,o,r,n,s,i)}async createObject(t,e=0,a,r={}){return await this.doCRUDObject("insert",t,null,e,a,{},r)}async getObject(t,e,a=0,r={},i=null){return await this.doCRUDObject("get",t,e,a,i,r)}async updateObject(t,e,a=0,r,i={},n="put"){return await this.doCRUDObject("update",t,e,a,r,{},i,n)}async deleteObject(t,e,a=0,r,i="delete"){return await this.doCRUDObject("delete",t,e,a,r,{},{},i)}async getScheme(t,e,a=0,r=null){if(!t)throw"Paramater `model` is required.";if(!e)throw"Paramater `token` is required.";let i={};r&&(i={keys:r});return await this.runFetch(`/${t}/scheme`,"get",a,i,{},e)}async postContact(t,e,a=0,r={}){if(!e)throw"Paramater `formId` is required.";return await this.runFetch(`/contact/${t}/${e}`,"post",a,{},r)}async getContactToken(t,e=0){return await this.postContact("token",t,e)}async confirmContact(t,e=0,a={}){return await this.postContact("confirm",t,e,a)}async submitContact(t,e=0,a={}){return await this.postContact("submit",t,e,a)}async searchObjects(t,e=0,a={}){return await this.runFetch(`/${t}/search`,"get",e,a)}}})(),t=t.default})()}));